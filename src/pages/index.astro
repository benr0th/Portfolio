---
import Layout from "@/layouts/Layout.astro";
import Card from "@components/Card.astro";

const stageSelect =
  "../mega_man_stage_select_template_by_evilasio2_deztn1x-pre.png";
---

<input type="checkbox" id="switch" class="" />
<div class="crt">
  <Layout title="Ben Roth">
    <main>
      <div class="overlay">AV-1</div>
      <!-- <img src={stageSelect} alt="stage select" class="stage-select" /> -->
      <!-- <p style="font-family: MMRock9, 'Press Start 2P', sans-serif">WEB DEV</p> -->
      <div class="game-container w-full sm:h-[850px] h-full flex justify-center items-center">
        <canvas id="game"></canvas>
        <div id="ui"></div>
      </div>
      <script type="module" src="/src/excal/main.ts"></script>
      <!-- <script>
        window.addEventListener("load", fakeCRT, false);

        function fakeCRT() {
          var glcanvas, source, srcctx, texture, w, h, hw, hh, w75;

          // Try to create a WebGL canvas (will fail if WebGL isn't supported)
          try {
            glcanvas = fx.canvas();
          } catch (e) {
            return;
          }

          // Assumes the first canvas tag in the document is the 2D game, but
          // obviously we could supply a specific canvas element here.
          source = document.getElementsByTagName("canvas")[0];
          srcctx = source.getContext("2d");

          // This tells glfx what to use as a source image
          texture = glcanvas.texture(source);

          // Just setting up some details to tweak the bulgePinch effect
          w = source.width;
          h = source.height;
          hw = w / 2;
          hh = h / 2;
          w75 = w * 0.75;

          // Hide the source 2D canvas and put the WebGL Canvas in its place
          source.parentNode.insertBefore(glcanvas, source);
          source.style.display = "none";
          glcanvas.className = source.className;
          glcanvas.id = source.id;
          source.id = "old_" + source.id;

          // It is pretty silly to setup a separate animation timer loop here, but
          // this lets us avoid monkeying with the source game's code.
          // It would make way more sense to do the following directly in the source
          // game's draw function in terms of performance.
          setInterval(
            function () {
              // Give the source scanlines
              // srcctx.drawImage(lines, 0, 0, w, h);

              // Load the latest source frame
              texture.loadContentsOf(source);

              // Apply WebGL magic
              glcanvas
                .draw(texture)
                .bulgePinch(hw, hh, w75, 0.12)
                .vignette(0.25, 0.74)
                .update();
            },
            Math.floor(1000 / 40)
          );
        }
      </script> -->
    </main>
  </Layout>
</div>
<style>
  @import "../styles/styles.scss";
</style>
